// build.gradle

apply plugin: 'idea'
apply plugin: 'java'



// ==========================================================================================
// Define Utility Functions to read the version number and increment it
// ==========================================================================================

String rootGetReleaseVersion() {
    def versionPropsFile = file("version.properties")
    if (versionPropsFile.exists() && versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        return versionProps['version']
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}

String rootIncrementReleaseVersion() {
    def versionPropsFile = file("version.properties")
    if (versionPropsFile.exists() && versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['version'].toInteger() + 1
        println ( "**** code = $code : ${project.name}")
        versionProps['version']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), "# AUTO-GENERATED by Gradle: please DO NOT EDIT this file!")
        return code.toString()
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}



ext {
    platformVersion         = rootGetReleaseVersion()
}

group = 'demo.emso'
version = platformVersion

repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'org.apache.commons:commons-math3:3.4'
    compile 'commons-beanutils:commons-beanutils:1.9.2'
    compile 'org.apache.commons:commons-email:1.3.3'


    compile 'org.hibernate:hibernate-entitymanager:4.3.9.Final'
    compile 'org.hibernate:hibernate-core:4.3.9.Final'
//    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
//    compile 'org.hibernate:hibernate-ehcache:4.3.9.Final'
}

task hello << {
	println "Hello world from Gradle"
}

// ==========================================================================================
// Root project tasks
// ==========================================================================================


void executeGit( String cmd ) {
    println("**** Executing Git command: [${cmd}]")
    def process = cmd.execute()
    String output = process.text.trim()
    def exitValue = process.exitValue()
    println("**** process.exitValue() = ${exitValue}")
    if (exitValue != 0 ) {
        throw new GradleException("Last command [$cmd] failed with exitValue: [$exitValue]")
    }
    println(output)
}

task incrementVersion(description: 'increases the version number') {
    doLast {
        println("**** incrementing the version number inside name: ${project.name}")
        rootIncrementReleaseVersion()
    }
}

task getVersion(description: 'retrieves the version number') {
    doLast {
        def xver = rootGetReleaseVersion()
        println "**** version number inside name: ${project.name} is ${xver}"
    }
}

task executeGit(description: "execute git command") {
    doLast {
        println 'git rev-list HEAD'.execute().text.split().size()
        println "**** output ****"
        println 'git remote -v'.execute().text.trim()
        println "**** output ****"
    }
}

task incrementPlatform(description: "increase the project version number through GIT") {
    doLast{
        //    println 'git checkout master'.execute().text.split().size()

        // FIXME: Read up on executing process from Gradle and Groovy

//        executeGit("git checkout master")

        def value = rootIncrementReleaseVersion()

        executeGit("git commit -m  'RELEASE_${value}'")

        executeGit("git tag RELEASE_${value} -m 'RELEASE_${value}'")

        executeGit("git pull origin master")

        executeGit("git push --tags")
    }
}